1. hashCode and equals methods and override
    https://www.baeldung.com/java-equals-hashcode-contracts

2. hashCode() method: It is used to get the hash code of an object. hashCode() method of the object class returns
   the memory reference of an object in integer form. Definition of hashCode() method is public native hashCode(). It indicates
   the implementation of hashCode() is native because there is not any direct method in java to fetch the reference of the object.
   -> If we create new object then the hashcode() will be assigned to that memory location. If we update any instance variables contained
      in that object, but since it still stays at same memory location the hashcode of the object is also the same !
   -> If we create 2 objects of same class and with same values but since these 2 objects are separate they are stored at 2
      different memory location, hence have 2 different hashcodes. The ==, equals will return false and hashcode() gives 2 values.

3. equals and hashcode method overrides:
    Default: equals method compares if 2 object references (stack) point to same objects (heap) and same memory location.
            It is defined in Object class and uses '==' operator to compare.
             this method returns true if and only if x and y refer to the same object and x == y
              It returns false 2 objects even if they hv equal values
             Similarly, hashCode() method of the object class returns the memory reference of an object in integer form.
             Since 2 objects have 2 different memory location irrespective of their values, they have distinct hashcodes !

    If we override the equals method (as in String class), to return true based on Object's values and not based on if it points
    to same object, which basically overrides to say 2 objects with equal values are also equal. In that case
    if we still use Object class native hashcode() method, then  it will return 2 hashcodes which means 2 objects
    are distinct, hence we MUST override the hashcode() to calc hashcode based on Object values and not memory location
    That way equals and hashcode will be aligned and does not cause unexpected code behaviour !


        /**
         * Returns a hash code value for the object. This method is
         * supported for the benefit of hash tables such as those provided by
         * {@link java.util.HashMap}.
         * <p>

    ****************    The general contract of {@code hashCode} is:        ****************************

         * <ul>
         * <li>Whenever it is invoked on the same object more than once during
         *     an execution of a Java application, the {@code hashCode} method
         *     must consistently return the same integer, provided no information
         *     used in {@code equals} comparisons on the object is modified.
         *     This integer need not remain consistent from one execution of an
         *     application to another execution of the same application.
         * <li>If two objects are equal according to the {@link
         *     #equals(Object) equals} method, then calling the {@code
         *     hashCode} method on each of the two objects must produce the
         *     same integer result.
         * <li>It is <em>not</em> required that if two objects are unequal
         *     according to the {@link #equals(Object) equals} method, then
         *     calling the {@code hashCode} method on each of the two objects
         *     must produce distinct integer results.  However, the programmer
         *     should be aware that producing distinct integer results for
         *     unequal objects may improve the performance of hash tables.
         * </ul>
         *
         * @implSpec
         * As far as is reasonably practical, the {@code hashCode} method defined
         * by class {@code Object} returns distinct integers for distinct objects.
         *
         * @return  a hash code value for this object.
         * @see     java.lang.Object#equals(java.lang.Object)
         * @see     java.lang.System#identityHashCode
         */
        @IntrinsicCandidate
        public native int hashCode();

        /**
         * Indicates whether some other object is "equal to" this one.
         * <p>
         * The {@code equals} method implements an equivalence relation
         * on non-null object references:
         * <ul>
         * <li>It is <i>reflexive</i>: for any non-null reference value
         *     {@code x}, {@code x.equals(x)} should return
         *     {@code true}.
         * <li>It is <i>symmetric</i>: for any non-null reference values
         *     {@code x} and {@code y}, {@code x.equals(y)}
         *     should return {@code true} if and only if
         *     {@code y.equals(x)} returns {@code true}.
         * <li>It is <i>transitive</i>: for any non-null reference values
         *     {@code x}, {@code y}, and {@code z}, if
         *     {@code x.equals(y)} returns {@code true} and
         *     {@code y.equals(z)} returns {@code true}, then
         *     {@code x.equals(z)} should return {@code true}.
         * <li>It is <i>consistent</i>: for any non-null reference values
         *     {@code x} and {@code y}, multiple invocations of
         *     {@code x.equals(y)} consistently return {@code true}
         *     or consistently return {@code false}, provided no
         *     information used in {@code equals} comparisons on the
         *     objects is modified.
         * <li>For any non-null reference value {@code x},
         *     {@code x.equals(null)} should return {@code false}.
         * </ul>
         *
         * <p>
         * An equivalence relation partitions the elements it operates on
         * into <i>equivalence classes</i>; all the members of an
         * equivalence class are equal to each other. Members of an
         * equivalence class are substitutable for each other, at least
         * for some purposes.
         *
         * @implSpec
         * The {@code equals} method for class {@code Object} implements
         * the most discriminating possible equivalence relation on objects;
         * that is, for any non-null reference values {@code x} and
         * {@code y}, this method returns {@code true} if and only
         * if {@code x} and {@code y} refer to the same object
         * ({@code x == y} has the value {@code true}).
         *
         * In other words, under the reference equality equivalence
         * relation, each equivalence class only has a single element.
         *
         * @apiNote
         * It is generally necessary to override the {@link #hashCode() hashCode}
         * method whenever this method is overridden, so as to maintain the
         * general contract for the {@code hashCode} method, which states
         * that equal objects must have equal hash codes.
         *
         * @param   obj   the reference object with which to compare.
         * @return  {@code true} if this object is the same as the obj
         *          argument; {@code false} otherwise.
         * @see     #hashCode()
         * @see     java.util.HashMap
         */
        public boolean equals(Object obj) {
            return (this == obj);
        }