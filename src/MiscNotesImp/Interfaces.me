Inheritance provides a way to create a new class from an existing class. The new class is a specialized version of the existing class such that it inherits all the non-private fields (variables) and methods of the existing class. The existing class is used as a starting point or as a base to create the new class.

The IS A relationship
After reading the above definition, the next question that comes to your mind is What is the use case of inheritance? Well, the answer is that wherever we come across an IS A relationship between objects, we can use inheritance.

SuperClass (Parent Class or Base Class): This class allows the re-use of its non-private members in another class.
SubClass (Child Class or Derived Class): This class is the one that inherits from the superclass.

Note: A child class has all non-private characteristics of the parent class.

What does a child class have?
An object of the child class can use:
All non-private members defined in the child class.
All non-private members defined in the parent class.

Note: Some classes cannot be inherited. Such classes are defined with the keyword, final. An example of such a class is the built-in Integer class - this class cannot have derived classes.

Types of Inheritance
----------------------
Single
Multi-level
Hierarchical
Multiple
Hybrid


An interface is just like a class and specifies the behavior that a class must implement.

An interface can be used to achieve 100% abstraction as it contains the method signatures/abstract methods(what to be done) and no implementation details (how to be done) of these methods. In this way, interfaces satisfy the definition of abstraction. The implementation techniques of the methods declared in an interface are totally up to to the classes implementing that interface.
An interface can be thought of as a contract that a class has to fulfill while implementing an interface. According to this contract, the class that implements an interface has to @Override all the abstract methods declared in that very interface.

An interface can have:
    abstract method(s)
    default method(s) - Java 8 and above
    static method(s)
    private method(s) - Java 9  and above
    private static method(s)
    public static final variable(s)

    All the methods declared or implemented in an interface are by default public and all the variables are by default public static final.
    Just like an abstract class, an interface cannot be instantiated.
    To use an interface, a class must implement all of the abstract method(s) declared in it.
    An interface cannot have constructor(s) in it.
    A class cannot extend from more than one class, but it can implement any number of interfaces.
    An interface can extend from another interface.
    An interface cannot be declared private or protected.


